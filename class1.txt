CLASS #1

files: syllabus.pdf, Lecture 1A.pdf, Lecture 1B.pdf, Lecture 1C.pdf

1. Course overview
- all materials will be posted up on NYU Home, under the Resources folder
- there will be folders for each lecture, etc
- structure: one 30min lunch btw 12-1, two additional 15min breaks
- homeworks:
    => optional but highly recommended
    => will be solved in the next class
- there will be a final project (80%)
- class participation is part of the final grade (10%)
- attendance as well (10%)


2. Programming
- program = code + data
- iOS is done in Objective-C (invented in 1983) or in Swift (invented in 2014)
- Objective-C & Swift have the same runtime performance
- you can mix these 2 languages inside an app
- Apple recommends to write new stuff in Swift
- likely 2-3 years down the road they will stop releasing new things in Objective-C, only in Swift


3. Xcode
- Products/NAME.app is the executable binary:
    => you can see the full path of it on the right properties panel
- Circles icon: see both header & content at the same time
    => opens the Assistant Editor
    => View => Assistant Editor: you can configure whether to put it to the right or the bottom
- icons:
    => folder: layout of files
    => structure: layout of classes
    => then: search, errors, debugger icons
- click on any line number to add a break point
    => click & drag it off to remove it completely
    => Variables View (left panel) in the Debug Area shows you all variables at a particular breakpoint


4. Swift
- no semi-colons syntax
- var name:type is the variable & argument syntax:
    var x:float = 4.7
    var s:String = "4.7"
    let ret:String = String(format: "%.2f", x)
- all variables must be initialized at declaration time
- keyword 'func' indicates that it's a function:
    func adder(first: Int, second: Int) {
        var result = first + second
        print(String(result))
    }

    adder(4, second: 5)
    => first argument:       NO LABEL
    => additional arguments: NEED LABELS
    => if you want a label for the first argument:
            func adder2(FN first: Int, second: Int) { ... }
            adder2(FN: 5, second: 9)
- to return a value: use -> Type
- cast from String to double:
    => var doubleVal = NSString(string: str).doubleValue
    => var doubleVal = (str as String).doubleValue
- let vs var:
    => var means it can change
    => let means it cannot change
- switch statement:
    => no need for 'break', Swift knows when it reaches next case to jump out
    => supports range via triple dots '...':
        case 1...25:
        case 26...50:


5. Arrays & Dictionaries
- array: [Int] or NSArray
    => var arr:[Int] = [7, 2, 9, 1]
    => var cities:NSArray = ["New York", "Boston", "Chicago"]
    => get an item out of the array as another data type:
        let firstCity = cities[0] as! String
- dictionary: [Int: String] or NSDictionary
    => var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
    => var list:NSDictionary = ["John":12, "Mary":13, "Bill":15, "Jim":19]
    => key:value syntax per item
    => for ( name, age ) in list {
           print("Name: ", name, ", age: ",age)
       }
    => dictionaries are not ordered


6. Classes
- power of Swing & Objective-C comes from classes
- classes = data structure like, but have additional functions in them
- classes have inheritance, polymorphism, abstraction, encapsulation
- they must have a constructor
- example:
    class Player {
        var name: String
        var age: Int
        var score: Int
        
        init(n:String, a:Int, s:Int) {
            name = n
            age = a
            score = s
        }
        
        func printData() {
            print("name: ", name)
            print("age: ", age)
            print("score: ", score)
        }
    }

    var p1:Player = Player(n: "Kevin", a: 23, s: 45)
    p1.printData()
